#Options
GenerateScanner = true
GenerateParser = true
Language = C++
ScannerName = Lexical
ParserName = Syntactic
SemanticName = Semantic
ScannerCaseSensitive = true
ScannerTable = Full
Input = String
Parser = SLR
#RegularDefinitions

#Tokens
// Ignore
:[\n\r\t\s]*

// Comments
SINGLE_LINE_COMMENT: (/)(/)[^\n]*
MULTI_LINE_COMMENT: /\*([^\*]|[\r\n]|(\*+([^\*/]|[\r\n])))*\*+/

// Identifiers
ID : [a-zA-Z_][a-zA-Z0-9_]*

// Data Types
INT = ID : "int"
FLOAT = ID : "float"
DOUBLE = ID : "double"
CHAR = ID : "char"
STRING = ID : "string"
BOOLEAN = ID : "bool"
VOID = ID : "void"

// Reserved Keywords
IF = ID : "if"
ELSE = ID : "else"
WHILE = ID : "while"
DO = ID : "do"
FOR = ID : "for"
SWITCH = ID : "switch"
CASE = ID : "case"
RETURN = ID : "return"
CONTINUE = ID : "continue"
BREAK = ID : "break"
DEFAULT = ID : "default"
INPUT = ID : "input"
OUTPUT = ID : "print"

// Assignment
ASSIGNMENT: "="
ASSIGNMENT_ADD: "+="
ASSIGNMENT_SUB: "-="
ASSIGNMENT_MULT: "*="
ASSIGNMENT_DIVIDE: "/="
ASSIGNMENT_REMAIN: "%="

// Arithmetic Operators
INCREMENT : "++"
DECREMENT : "--"
PLUS : "+"
MINUS : "-"
MULTIPLY : "*"
DIVIDE : "/"
REMAINDER : "%"

// Logical Operators
AND : "&&"
OR : "||"
NOT : "!"

// Bitwise Operators
BIT_AND : "&"
BIT_OR : "|"
BIT_XOR : "^"
BIT_NOT : "~"
BIT_LSHIFT : "<<"
BIT_RSHIFT : ">>"

// Relational Operators
GT : ">"
LT : "<"
GE : ">="
LE : "<="
EQ : "=="
NE : "!="

// Literals
VAL_BINARY : "0b"[01]+
VAL_HEXADECIMAL : "0x"[0-9a-fA-F]+
VAL_INTEGER : [0-9]+
VAL_FLOAT : [0-9]*(\.[0-9]+)?f
VAL_DOUBLE : [0-9]*\.[0-9]+
VAL_CHAR : '[^']'
VAL_STRING: \"[^\"]*\"
VAL_TRUE = ID : "true"
VAL_FALSE = ID : "false"

// Delimiters and Punctuation
"("
")"
"["
"]"
"{"
"}"
","
";"
":"
"."
#NonTerminals
<program>
<statement_list>
<statement>
<comments>
<declaration>
<dec_assign_list>
<dec_assign>
<array_dec>
<assignment>
<expression>
<exp2>
<exp3>
<exp4>
<exp5>
<exp6>
<exp7>
<exp8>
<exp9>
<exp10>
<exp11>
<exp12>
<val>
<assignable_func_call>
<op_assign>
<op_rel_low>
<op_rel_high>
<op_bitwise>
<op_arit_low>
<op_arit_high>
<op_neg>
<op_inc>
<val_number>
<val_string>
<val_boolean>
<data_type>
<assignable>
<array_access>
<array>
<array_nested>
<array_values>
<func_call>
<func_call_params>
<while_loop>
<assign_or_dec>
<for_loop>
<do_while_loop>
<loop>
<if_statement>
<switch_case>
<case_list>
<case_item>
<default_case>
<return_statement>
<break_statement>
<continue_statement>
<input>
<output>
<subroutine_def>
<subroutine_def_array_declaration>
<subroutine_def_type>
<subroutine_def_param_list>
<param_subroutine_def>
<block>
<no_semicolon>
#Grammar
<program> ::= <statement_list>;

// Statements
<statement_list> ::= <statement_list> <statement> ";" | <statement_list> <no_semicolon> | <statement> ";" | <no_semicolon>;
<statement> ::= <declaration>
              | <assignment>
              | <expression>
              | <return_statement>
              | <break_statement>
              | <continue_statement>
              | <input>
              | <output>;

// Comments
<comments> ::= SINGLE_LINE_COMMENT | MULTI_LINE_COMMENT;

// Declarations
<declaration> ::= <data_type> <dec_assign_list>;
<dec_assign_list> ::= <dec_assign_list> "," <dec_assign> | <dec_assign> ;
<dec_assign> ::= ID #1 ASSIGNMENT <expression> #3 #4 | ID #1 #8 <array_dec> ASSIGNMENT #7 <array> #5 | ID #1 #8 <array_dec> #5 | ID #1 #3;
<array_dec> ::= <array_dec> "[" <expression> #6 "]" | "[" <expression> #6 "]";

// Assignments
<assignment> ::= <assignable> <op_assign> <expression> #4;

// Expression
<expression> ::= <expression> OR #18 <exp2> | <exp2>;
<exp2> ::= <exp2> AND #18 <exp3> | <exp3>;
<exp3> ::= <exp3> BIT_OR #17 <exp4> | <exp4>;
<exp4> ::= <exp4> BIT_XOR #17 <exp5> | <exp5>;
<exp5> ::= <exp5> BIT_AND #17 <exp6> | <exp6>;
<exp6> ::= <exp6> <op_rel_low> <exp7> | <exp7>;
<exp7> ::= <exp7> <op_rel_high> <exp8> | <exp8>;
<exp8> ::= <exp8> <op_bitwise> <exp9> | <exp9>;
<exp9> ::= <exp9> <op_arit_low> <exp10> | <exp10>;
<exp10> ::= <exp10> <op_arit_high> <exp11> | <exp11>;
<exp11> ::= <op_neg> <exp11> | <op_inc> <assignable> | <exp12>;
<exp12> ::= <assignable> <op_inc> | <val> | "(" <expression> ")";

<val> ::= <val_number> | <val_string> | <val_boolean> | <assignable_func_call>;
<assignable_func_call> ::= <assignable> #36 <func_call> | <assignable> #36;

// Operators
<op_assign> ::= ASSIGNMENT #11 | ASSIGNMENT_ADD #13 | ASSIGNMENT_SUB #12 | ASSIGNMENT_MULT #12 | ASSIGNMENT_DIVIDE #12 | ASSIGNMENT_REMAIN #14;
<op_rel_low> ::= EQ #19 | NE #19;
<op_rel_high> ::= GT #15 | LT #15 | GE #15 | LE #15;
<op_bitwise> ::= BIT_LSHIFT #17 | BIT_RSHIFT #17;
<op_arit_low> ::= PLUS #16 | MINUS #15;
<op_arit_high> ::= MULTIPLY #15 | DIVIDE #15 | REMAINDER #17;
<op_neg> ::= MINUS #15 | BIT_NOT #17 | NOT #18;
<op_inc> ::= INCREMENT #15 | DECREMENT #15;

// Values and Function Calls
<val_number> ::= VAL_BINARY #31 | VAL_HEXADECIMAL #31 | VAL_INTEGER #31 | VAL_FLOAT #32 | VAL_DOUBLE #32;
<val_string> ::= VAL_CHAR #33 | VAL_STRING #34;
<val_boolean> ::= VAL_TRUE #35 | VAL_FALSE #35;

<data_type> ::= INT #2 | FLOAT #2 | DOUBLE #2 | CHAR #2 | STRING #2 | BOOLEAN #2;

<assignable> ::= ID #1 <array_access> "." <assignable> | ID #1 <array_access> | ID #1 "." <assignable> | ID #1;
<array_access> ::= <array_access> "[" <expression> #54 "]" | "[" <expression> #54 "]";

<array> ::= "[" #52 <array_nested> "]" #53 | "[" #52 <array_values> "]" #53;
<array_nested> ::= <array_nested> "," <array> #51 | <array> #51;
<array_values> ::= <array_values> "," <expression> #51 | <expression> #51;

// Function Call
<func_call> ::= "(" <func_call_params> ")" | "(" ")";
<func_call_params> ::= <func_call_params> "," <expression> #22 | <func_call_params> "," <array> #22 | <expression> #22 | <array> #22;

// Control Structures
<while_loop> ::= WHILE "(" <expression> #44 ")" <block>;
<assign_or_dec> ::= <assignment> | <declaration>;
<for_loop> ::= FOR "(" <assign_or_dec> #46 ";" <expression> #47 ";" <expression> #48 ")" <block>;
<do_while_loop> ::= DO <block> WHILE "(" <expression> #45 ")" ";";

<loop> ::= <while_loop> | <for_loop> | <do_while_loop>;

<if_statement> ::= IF "(" <expression> #41 ")" <block>
                 | IF "(" <expression> #41 ")" <block> ELSE <block>
                 | IF "(" <expression> #41 ")" <block> ELSE <if_statement>;


<switch_case> ::= SWITCH "(" <expression> ")" "{" <case_list> "}" | SWITCH "(" <expression> ")" "{" <case_list> <default_case> "}";
<case_list> ::= <case_item> <case_list> | <case_item>;
<case_item> ::= CASE <expression> ":" <statement_list>;
<default_case> ::= DEFAULT ":" <statement_list>;

<return_statement> ::= RETURN <expression> #25 | RETURN #25;
<break_statement> ::= BREAK #49;
<continue_statement> ::= CONTINUE #50;

// I/O and Flow Control
<input> ::= INPUT "(" <assignable> #26 ")";
<output> ::= OUTPUT "(" <expression> #27 ")";

// Subroutines
<subroutine_def> ::= <subroutine_def_type> "(" <subroutine_def_param_list> ")" <block> | <subroutine_def_type> "(" ")" <block>;
<subroutine_def_array_declaration> ::= <subroutine_def_array_declaration> "[" "]" #52 | "[" "]" #52;
<subroutine_def_type> ::= <data_type> ID #1 #28 | <data_type> <subroutine_def_array_declaration> ID #1 #28 | VOID #2 ID #1 #28;
<subroutine_def_param_list> ::= <subroutine_def_param_list> "," <param_subroutine_def> #21 | <param_subroutine_def> #21;
<param_subroutine_def> ::= <data_type> ID #1 | <data_type> ID #1 <subroutine_def_array_declaration>;

// Block & No Semicolon
<block> ::= "{" #23 <statement_list> "}" #24 | "{" #23 "}" #24;
<no_semicolon> ::= <loop>
            | <if_statement>
            | <switch_case>
            | <block>
            | <subroutine_def>
            | <comments>;