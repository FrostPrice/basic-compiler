#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = true
ScannerTable = Full
Input = String
Parser = SLR
#RegularDefinitions

#Tokens
// Ignore
:[\n\r\t\s]*

// Identifiers
ID : [a-zA-Z_][a-zA-Z0-9_]*

// Data Types
INT = ID : "int"
FLOAT = ID : "float"
DOUBLE = ID : "double"
CHAR = ID : "char"
STRING = ID : "string"
BOOLEAN = ID : "bool"

// Reserved Keywords
IF = ID : "if"
ELSE = ID : "else"
WHILE = ID : "while"
DO = ID : "do"
FOR = ID : "for"
SWITCH = ID : "switch"
CASE = ID : "case"
RETURN = ID : "return"
CONTINUE = ID : "continue"
BREAK = ID : "break"
DEFAULT = ID : "default"

// Assignment
ASSIGNMENT: "="
ASSIGNMENT_ADD: "+="
ASSIGNMENT_SUB: "-="
ASSIGNMENT_MULT: "*="
ASSIGNMENT_DIVIDE: "/="
ASSIGNMENT_REMAIN: "%="

// Arithmetic Operators
INCREMENT : "++"
DECREMENT : "--"
PLUS : "+"
MINUS : "-"
MULTIPLY : "*"
DIVIDE : "/"
REMAINDER : "%"

// Logical Operators
AND : "&&"
OR : "||"
NOT : "!"

// Bitwise Operators
BIT_AND : "&"
BIT_OR : "|"
BIT_XOR : "^"
BIT_NOT : "~"
BIT_LSHIFT : "<<"
BIT_RSHIFT : ">>"

// Relational Operators
GT : ">"
LT : "<"
GE : ">="
LE : "<="
EQ : "=="
NE : "!="

// Literals
VAL_BINARY : "0b"[01]+
VAL_HEXADECIMAL : "0x"[0-9a-fA-F]+
VAL_INTEGER : [0-9]+
VAL_FLOAT : [0-9]*(\.[0-9]+)?f
VAL_DOUBLE : [0-9]*\.[0-9]+
VAL_CHAR : '[^']'
VAL_STRING: \"[^\"]*\"
VAL_TRUE = ID : "true"
VAL_FALSE = ID : "false"

// Comments
SINGLE_LINE_COMMENT : (/)(/)[^\n]*
MULTI_LINE_COMMENT: /(\*)([^\*]|\*+[^"\/"])*(\*)/

// Delimiters and Punctuation
"("
")"
"["
"]"
"{"
"}"
","
";"
":"
"."
#NonTerminals
<instruction_set>
<instruction_type>
<instruction>
<declaration>
<dec_assign_list>
<dec_assign>
<assignment>
<expression>
<exp1>
<exp2>
<exp3>
<exp4>
<exp5>
<exp6>
<exp7>
<exp8>
<exp9>
<exp10>
<exp11>
<exp12>
<op_assign>
<op_rel_low>
<op_rel_high>
<op_bitwise>
<op_arit_low>
<op_arit_high>
<op_neg>
<op_inc>
<val_number>
<val_string>
<val_boolean>
<data_type>
<array_declaration>
<assignable>
<array_access>
<array_value>
<params>
<func_call>
#Grammar
<instruction_type> ::= <declaration> | <expression> | <assignment>;
<instruction> ::= <instruction_type> ";";
<instruction_set> ::= <instruction_set> <instruction> | <instruction>;

<declaration> ::= <data_type> <dec_assign_list>;
<dec_assign_list> ::= <dec_assign_list> "," <dec_assign> | <dec_assign>;
<dec_assign> ::= ID ASSIGNMENT <expression> | ID <array_access> ASSIGNMENT <array_value> | ID <array_access> | ID;

<assignment> ::= <assignable> <op_assign> <expression>;

<expression> ::= <expression> OR <exp1> | <exp1>;
<exp1> ::= <exp1> AND <exp2> | <exp2>;
<exp2> ::= <exp2> BIT_OR <exp3> | <exp3>;
<exp3> ::= <exp3> BIT_XOR <exp4> | <exp4>;
<exp4> ::= <exp4> BIT_AND <exp5> | <exp5>;
<exp5> ::= <exp5> <op_rel_low> <exp6> | <exp6>;
<exp6> ::= <exp6> <op_rel_high> <exp7> | <exp7>;
<exp7> ::= <exp7> <op_bitwise> <exp8> | <exp8>;
<exp8> ::= <exp8> <op_arit_low> <exp9> | <exp9>;
<exp9> ::= <exp9> <op_arit_high> <exp10> | <exp10> ;
<exp10> ::= <op_neg> <exp11> | <op_inc> <assignable> | <exp11>;
<exp11> ::= <assignable> <op_inc> | <exp12>;
<exp12> ::= <val_number> | <val_string> | <val_boolean> | <assignable> | <assignable> <func_call> | "(" <expression> ")";

<op_assign> ::= ASSIGNMENT | ASSIGNMENT_ADD | ASSIGNMENT_SUB | ASSIGNMENT_MULT | ASSIGNMENT_DIVIDE | ASSIGNMENT_REMAIN;
<op_rel_low> ::= EQ | NE;
<op_rel_high> ::= GT | LT | GE | LE;
<op_bitwise> ::= BIT_LSHIFT | BIT_RSHIFT;
<op_arit_low> ::= PLUS | MINUS;
<op_arit_high> ::= MULTIPLY | DIVIDE | REMAINDER;
<op_neg> ::= MINUS | BIT_NOT | NOT;
<op_inc> ::= INCREMENT | DECREMENT;

<val_number> ::= VAL_BINARY | VAL_HEXADECIMAL | VAL_INTEGER | VAL_FLOAT | VAL_DOUBLE;
<val_string> ::= VAL_CHAR | VAL_STRING;
<val_boolean> ::= VAL_TRUE | VAL_FALSE;

<data_type> ::= INT | FLOAT | DOUBLE | CHAR | STRING | BOOLEAN;
<array_declaration> ::= "[" "]" <array_declaration> | "[" "]";

// variable, vector[0], matrix[1][2], object.prop, cube.vertices[3].x
<assignable> ::= ID <array_access> "." <assignable> | ID <array_access> | ID "." <assignable> | ID;

// [1], [2][3], [x[y]], [x.y]
<array_access> ::= "[" <expression> "]" <array_access> | "[" <expression> "]";

<array_value> ::= "[" <params> "]";

<params> ::= <expression> "," <params> | <array_value> "," <params> | <expression> | <array_value>;

<func_call> ::= "(" <params> ")" <func_call> | "(" <params> ")"
  | "(" ")" <func_call> | "(" ")";

//Exemplo com tudo para ser usado no simulador
// -x + 8.8 - !x * 2 / ~y % 3 << 7 != y >> 3 || (x <= 3 && y > 8) | p & (h ^ g)